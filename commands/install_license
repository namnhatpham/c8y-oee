#!/usr/bin/env bash
help() {
  cat <<EOF
----------------------------------------------------------------------------------------------------------
HELP MESSAGE:

    Usage: c8y oee $(basename "$0") [--license <license-string>] [--filePath <path-to-license-file>]
    Arguments:
      -l, --license   license-string        The license string
      -f, --filePath  path-to-license-file  The path to the xml license file
    ***NOTE*** One of these arguments must be used !!!

    Example usage:
      Install Apama license via c8y tenant option by input license string in command line
          c8y oee install_license --license 'ABCxyz-key-welcome-to-OEE'
      **Note** :
        1. The license string must be covered by single quote, i.e '<license-string>'.
        2. Any new line character must be removed to let terminal recognize the license string as a single string.

      Install Apama license via c8y tenant option by reading xml license file in any directory:
          c8y oee install_license --filePath "C:/path/to/your/license/file/license_file.xml"

      Install Apama license via c8y tenant option by reading xml license file in c8y-oee/licenses:
          c8y oee install_license
          -> user is provided a list of files to choose.

----------------------------------------------------------------------------------------------------------
EOF
}

error_check() {
  if [ $? -ne 0 ]; then
    echo "Error: process failed"
    exit 1
  fi
}


# Parse command-line options
REST_ARGS=()
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      help
      exit 0
      ;;
    -l|-license|--license)
      if [ $# -gt 1 ]; then
        LICENSE_UNESCAPED=$2
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    -f|-filePath|--filePath)
      if [ $# -gt 1 ]; then
        FILEPATH=$2
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    --*)
      REST_ARGS+=("$1")
      ;;
    *)
      ;;
  esac
  shift
done
set -- "${REST_ARGS[@]}"

# Check if license string was input in command line
missing_args=()
if [[ -z $LICENSE_UNESCAPED ]]; then
  if [[ -z $FILEPATH ]]; then

    # Check script current directory and move to licenses directory.
    script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
    cd "$script_dir/../licenses"
    error_check
    licenses_directory=$(pwd)

    # List all xml files in directory and prompt user to choose one
    xml_files=($(ls *.xml 2>/dev/null))
    if [ ${#xml_files[@]} -eq 0 ]; then
      echo "No XML files found in the c8y-oee/licenses directory"
    else
      echo "Please choose an XML license file to read:" >&2
      while true; do
        select file in "${xml_files[@]}" "Exit"; do
          case $file in
            "") echo "Invalid option. Please try again.";;
            "Exit") exit;;
            *)
              license_filepath="$licenses_directory/$file"
              license_filename=$file
              break 2;;
          esac
        done
      done
    fi

  else
    license_filepath=$FILEPATH
    # Extract filename from full path
    license_filename=$(basename "$license_filepath")
    # Extract directory path from full path
    filepath_without_filename=$(dirname "$license_filepath")
    # Change to directory containing license file
    cd "$filepath_without_filename"
    error_check
  fi

  if [[ -z $license_filepath ]]; then
    # Add filePath argument to missing message
    missing_args+=(filePath)
  else
    # Read license xml file
    LICENSE_UNESCAPED=$(cat "$license_filename")
    error_check
  fi

fi

# Add license argument to missing message
if [[ -z $LICENSE_UNESCAPED ]]; then
  missing_args+=(license)
fi

# If no license string exists by input or in file, show error message
if [[ ${#missing_args[@]} -gt 0 ]]; then
  message="Error: Missing one of required arguments: ${missing_args[0]}"
  for (( i=1; i<${#missing_args[@]}; i++ )); do
    message+=", ${missing_args[$i]}"
  done
  echo "$message" >&2
  echo "Please set the license variable using the -l or --license option, followed by the license key, or use the --filePath option to specify the path to the license XML file. For more information, please refer to the documentation." >&2
  help
  exit 1
fi

# Remove new line and return characters from license content
LICENSE_ESCAPED=$(echo "$LICENSE_UNESCAPED" | tr -d '\r\n')

echo "URL          :  $C8Y_HOST"
echo "Tenant ID    :  $C8Y_TENANT"
echo "User         :  $C8Y_USER"
if [ -n "$license_filepath" ]; then
  echo "License file :  $license_filepath"
fi

echo "License is being installed"

# Encode the string to UTF-8
encoded_string=$(echo "$LICENSE_ESCAPED" | iconv -t UTF-8)

# Send request to cumulocity
response=$(c8y tenantoptions update --category apama --key credentials.license --value "$encoded_string" "$@")

# Check fault if failed to send request
if [[ -z $response ]]; then
  echo "Error: Failed to send request. No response from server." >&2
  exit 1
fi

# Check fault if request receives error message from server
if [[ $response == *"serverError"* || -z $response ]]; then
  echo "$response"
  echo "Error: Failed to add apama license to tenant option." >&2
  exit 1
fi

echo "License is installed successfully"
exit 0