#!/usr/bin/env bash
help() {
  cat <<EOF
----------------------------------------------------------------------------------------------------------
HELP MESSAGE:

    Usage: c8y oee \\$(basename "$0") [--license <license-string>]
    Arguments:
      -l, --license  LICENSE_String  The license string (required if license file is not available in the commands directory)

    Example usage:
    Install Apama license via c8y tenant option by input license key in command line
        c8y oee \install_license --license ABCxyz-key-welcome-to-OEE

    Install Apama license via c8y tenant option by reading xml license file:
        c8y oee \install_license
    **Note** Only 1 xml license file should be available in the commands directory (same directory with the install_license script)

----------------------------------------------------------------------------------------------------------
EOF
}

error_check() {
  if [ $? -ne 0 ]; then
    echo "Error: process failed"
    exit 1
  fi
}


# Parse command-line options
REST_ARGS=()
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      help
      exit 0
      ;;
    -l|-license|--license)
      if [ $# -gt 1 ]; then
        LICENSE_UNESCAPED=$2
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    -f|-filePath|--filePath)
      if [ $# -gt 1 ]; then
        FILEPATH=$2
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    *)
      REST_ARGS+=("$1")
      ;;
  esac
  shift
done

# Check if license string was input in command line
missing_args=()
if [[ -z $LICENSE_UNESCAPED ]]; then
  # input filepath is . or ./example.xml
  if [[ $FILEPATH == "."* ]]; then
    # Check script current directory and move to license directory inside it.
    script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)
    cd "$script_dir\license"
    error_check

    # input file path is ./example.xml
    if [[ $FILEPATH == "./"* ]]; then
      # Extract filename after "./"
      license_file_name=${FILEPATH#./}

    # input file path is .
    else
      # List all files in directory and prompt user to choose one
      files=($(ls))
      echo "Please choose a file to read:"
      select file in "${files[@]}"; do
        if [[ -n $file ]]; then
          FILEPATH="$script_dir/$file"
          break
        fi
      done
      # Extract filename from full path
      license_file_name=$(basename "$FILEPATH")
    fi

  else
    # Extract filename from full path
    license_file_name=$(basename "$FILEPATH")
    # Extract directory path from full path
    FILEPATH_WITHOUT_FILENAME=$(dirname "$FILEPATH")
    # Change to directory containing license file
    cd "$FILEPATH_WITHOUT_FILENAME"
    error_check

  fi

  # Read license xml file
  LICENSE_UNESCAPED=$(cat "$license_file_name" 2>/dev/null)
  error_check

fi

# Remove new line and return characters from license content
LICENSE_ESCAPED=$(echo "$LICENSE_UNESCAPED" | tr -d '\r\n')
if [[ -z $LICENSE_ESCAPED ]]; then
  missing_args+=(license)
fi

# If no license string exists by input or in file, show error message
if [[ ${#missing_args[@]} -gt 0 ]]; then
  message="Error: Missing required arguments: ${missing_args[0]}"
  for (( i=1; i<${#missing_args[@]}; i++ )); do
    message+=", ${missing_args[$i]}"
  done
  echo "$message" >&2
  echo "License variable not set. Use -l|--license to set the license key or input it in license.json." >&2
  help
  exit 1
fi

set -- "${REST_ARGS[@]}"

echo "URL          :  $C8Y_HOST"
echo "Tenant ID    :  $C8Y_TENANT"
echo "User         :  $C8Y_USER"
echo "License file :  $license_file_name"

response=$(c8y tenantoptions update --category apama --key credentials.license --value "$LICENSE_ESCAPED" 2>&1)
if [[ $response == *"serverError"* ]]; then
  echo "$response"
  echo "Error: Failed to add apama license to tenant option." >&2
  exit 1
fi

echo "License is installed successfully"