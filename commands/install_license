#!/usr/bin/env bash
help() {
  cat <<EOF
----------------------------------------------------------------------------------------------------------
HELP MESSAGE:

    Usage: c8y oee \\$(basename "$0") [--license <license-key>]
    Arguments:
      -l, --license  LICENSE_KEY  The license key (required if license key is not provided in license.json)

    Example usage:
    Install Apamma license via c8y tenant option by input license key in command line
        c8y oee \install_license --license AbcD4E567

    Install Apamma license via c8y tenant option by input license key into license.json file:
        c8y oee \install_license

    -> In license.json, the license key should be input like this
    {
      "LICENSE_KEY": "AbcD4E567"
    }
----------------------------------------------------------------------------------------------------------
EOF
}

# Parse command-line options
REST_ARGS=()
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)
      help
      exit 0
      ;;
    -l|-license|--license)
      if [ $# -gt 1 ]; then
        LICENSE_UNESCAPED=$2
        shift
      else
        echo "Option $1 requires an argument." >&2
        exit 1
      fi
      ;;
    *)
      REST_ARGS+=("$1")
      ;;
  esac
  shift
done

# Check that the required arguments are present
missing_args=()
if [[ -z $LICENSE_UNESCAPED ]]; then
  # Check script current directory and move to it
  script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)
  cd "$script_dir"
  license_file_name=$(ls *.xml)
  LICENSE_UNESCAPED=$(cat $license_file_name)
  LICENSE_ESCAPED=$(echo "$LICENSE_UNESCAPED" | tr -d '\r\n')

  if [[ -z $LICENSE_UNESCAPED ]]; then
    missing_args+=(license)
  fi
fi

if [[ ${#missing_args[@]} -gt 0 ]]; then
  message="Error: Missing required arguments: ${missing_args[0]}"
  for (( i=1; i<${#missing_args[@]}; i++ )); do
    message+=", ${missing_args[$i]}"
  done
  echo "$message" >&2
  echo "License variable not set. Use -l|--license to set the license key or input it in license.json." >&2
  help
  exit 1
fi

set -- "${REST_ARGS[@]}"

echo "URL       :  $C8Y_HOST"
echo "Tenant ID :  $C8Y_TENANT"
echo "User      :  $C8Y_USER"

response=$(c8y tenantoptions update --category apama --key credentials.license --value "$LICENSE_ESCAPED" 2>&1)
if [[ $response == *"serverError"* ]]; then
  echo "$response"
  echo "Error: Failed to add apama license to tenant option." >&2
  exit 1
fi
